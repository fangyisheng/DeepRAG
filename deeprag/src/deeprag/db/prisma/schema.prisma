generator client {
  provider  = "prisma-client-py"
  interface = "asyncio"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model knowledge_space {
  id                   String  @id
  human_readable_id    String? @default(dbgenerated("nextval('knowledge_space_human_readable_id_seq'::regclass)"))
  user_id              String
  knowledge_space_name String
  files                file[]
  UserKnowledgeSpace   user    @relation(fields: [user_id], references: [id])
}

model file {
  id                                    String          @id
  human_readable_id                     String?         @default(dbgenerated("nextval('file_human_readable_id_seq'::regclass)"))
  doc_title                             String
  doc_text                              String?
  knowledge_space_id                    String
  minio_bucket_name                     String
  minio_object_name                     String
  indexed                               Boolean @default(false) 
  deep_indexed                          Boolean @default(false) 
  file_embedding_zilliz_collection_name String?
  KnowledgeSpaceFile                    knowledge_space @relation(fields: [knowledge_space_id], references: [id])
  text_chunks                           text_chunk[]
}

model text_chunk {
  id                String          @id
  human_readable_id String?         @default(dbgenerated("nextval('text_chunk_human_readable_id_seq'::regclass)"))
  doc_id            String
  text_chunk        String
  n_tokens          Int
  sub_graph_datas   sub_graph_data?
  FileTextChunk     file            @relation(fields: [doc_id], references: [id])
}

model sub_graph_data {
  id                          String            @id
  human_readable_id           String?           @default(dbgenerated("nextval('sub_graph_data_human_readable_id_seq'::regclass)"))
  text_chunk_id               String            @unique
  graph_data                  String
  merged_graph_data_id        String
  SubGraphDataMergedGraphData merged_graph_data @relation(fields: [merged_graph_data_id], references: [id])
  TextChunkSubGraphData       text_chunk        @relation(fields: [text_chunk_id], references: [id])
}

model merged_graph_data {
  id                                   String                    @id
  human_readable_id                    String?                   @default(dbgenerated("nextval('merged_graph_data_human_readable_id_seq'::regclass)"))
  graph_data                           String
  merged_graph_data_visualization_html String
  flatten_entity_relations             flatten_entity_relation[]
  sub_graph_datas                      sub_graph_data[]
}

model flatten_entity_relation {
  id                                    String             @id
  human_readable_id                     String?            @default(dbgenerated("nextval('flatten_entity_relation_human_readable_id_seq'::regclass)"))
  head_entity                           String
  tail_entity                           String
  merged_graph_data_id                  String
  community_id                          String?
  relation_description                  String
  FlattenEntityRelationCommunityCluster community_cluster? @relation(fields: [community_id], references: [id])
  FlattenEntityRelationMergedGraphData  merged_graph_data  @relation(fields: [merged_graph_data_id], references: [id])
}

model community_cluster {
  id                       String                    @id
  human_readable_id        String?                   @default(dbgenerated("nextval('community_cluster_human_readable_id_seq'::regclass)"))
  community_title          String
  community_report         community_report?
  flatten_entity_relations flatten_entity_relation[]
}

model community_report {
  id                              String            @id
  human_readable_id               String?           @default(dbgenerated("nextval('community_report_human_readable_id_seq'::regclass)"))
  community_report                String
  community_id                    String            @unique
  CommunityReportCommunityCluster community_cluster @relation(fields: [community_id], references: [id])
}

model user {
  id                String            @id
  human_readable_id String?           @default(dbgenerated("nextval('user_human_readable_id_seq'::regclass)"))
  user_name         String
  knowledge_spaces  knowledge_space[]
  llm_chats         llm_chat[]
}

model llm_chat {
  id                    String     @id
  user_id               String
  human_readable_id     String?    @default(dbgenerated("nextval('llm_chat_human_readable_id_seq'::regclass)"))
  user_prompt           String
  user_context          String?
  llm_answer            String
  message_start_time    String
  message_end_time      String
  message_duration_time String
  session_id            String
  llm_token_usage       Int
  embedding_token_usage Int
  LLLMChatUser          user       @relation(fields: [user_id], references: [id])
  rag_params            rag_param?
}

model rag_param {
  id                String   @id
  human_readable_id String?  @default(dbgenerated("nextval('rag_param_human_readable_id_seq'::regclass)"))
  message_id        String   @unique
  rag_groundings    String
  RagParamLLMChat   llm_chat @relation(fields: [message_id], references: [id])
}

model index_workflow {
  id                     String  @id
  status                 String?
  action                 String
  workflow_start_time    String?
  workflow_end_time      String?
  workflow_duration_time String?
  llm_cost_tokens        Int?
  embedding_cost_tokens  Int?
}
